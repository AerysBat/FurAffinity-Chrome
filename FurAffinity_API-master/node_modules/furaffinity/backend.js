// Include the request module to make HTTP & HTTPS requests
var request = require("request");

var verboseOutput = false;

module.exports = {

	// Function: verbose
	// Description: Sets verbose output to display extensive feedback
	// Author: RingoTheFox

	verbose: function () {
		verboseOutput = true;
	},
	
	// Function: userAgent
	// Description: Randomly selects a common User Agent to make the API client more transparent and appear as a user instead of a bot
	// Author: RingoTheFox

	userAgent: function () {
		var randomInt = Math.floor((Math.random() * 4) + 1);
		
		if (randomInt == 1) {
			return 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36';
		} else if (randomInt == 2) {
			return 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36';
		} else if (randomInt == 3) {
			return 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1944.0 Safari/537.36';
		} else {
			return 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36';
		}
	},
	
	// Function: output
	// Description: Outputs log information to the console with a timestamp
	// Author: RingoTheFox

	output: function (outputString) {
		if (verboseOutput) {
			var currentTime = new Date();
			
			var displayDate = currentTime.getMonth() + "/" + currentTime.getDay() + "/" + currentTime.getFullYear() + " ";

			var currentHours = currentTime.getHours();
			var currentMinutes = currentTime.getMinutes();
			var currentSeconds = currentTime.getSeconds();
			
			if (currentHours < 10) {
				currentHours = "0" + currentHours;
			}
			
			if (currentMinutes < 10) {
				currentMinutes = "0" + currentMinutes;
			}
			
			if (currentSeconds < 10) {
				currentSeconds = "0" + currentSeconds;
			}
			
			displayDate += currentHours + ":" + currentMinutes + ":" + currentSeconds;
			console.log("[" + displayDate + "] " + outputString);
		}
	},
	
	// Function: parseText
	// Description: Parses raw text data such as HTML
	// Author: RingoTheFox
	// ------------------------------------------------------------------------------------------------------
	// Inputs: leftDelimiter (string) => Left delimiter to look for
	// Inputs: rightDelimiter (string) => Right delimiter to look for
	// Inputs: rawString (string) => Raw string of text to parse through
	// ------------------------------------------------------------------------------------------------------
	// Outputs: return (string) => The parsed text

	parseText: function (leftDelimiter, rightDelimiter, rawString) {
		try {
			var outputString = rawString.split(leftDelimiter)
			outputString = outputString[1];
			outputString = outputString.split(rightDelimiter);
			outputString = outputString[0]
			
			return outputString;
		} catch(e) {
			module.exports.output("Error! Could not parse text data!");
			module.exports.output("Left Delimiter: " + leftDelimiter);
			module.exports.output("Right Delimiter: " + rightDelimiter);
			return "";
		}
	},
	
	// Function: postRequest
	// Description: Requests HTML from URL with the option to supply a session token or post data
	// Author: RingoTheFox
	// ------------------------------------------------------------------------------------------------------
	// Inputs: url (string) => The URL of the requested page
	// Inputs: sessionToken (string) => The user's session token
	// Inputs: postData (JSON object) => JSON Object of POST data
	// Inputs: callback (function) => The callback function to execute upon completion
	// ------------------------------------------------------------------------------------------------------
	// Outputs: error (integer) => Request error code
	//					0 => No Error
	//					1 => Invalid Session Token
	//					2 => Page Load Failure
	// Outputs: body (string) => Body HTML response

	postRequest: function (url, sessionToken, postData, callback) {
		var cookieData = "";

		if (sessionToken != "") {
			sessionToken = sessionToken.split("--");
			cookieData = "a=" + sessionToken[0] + "; b=" + sessionToken[1];
		}

		request({
			uri: url,
			method: "POST",
			headers: {
				'Cookie': cookieData,
				'User-Agent' : module.exports.userAgent()
			},
			followRedirect: false,
			form: postData,
			timeout: 8000
		}, function(error, response, body) {
			if (!error && response.statusCode == 200) {
				if (body.indexOf('<!-- top-menu -->') > -1) {
					if (body.indexOf('<a id="logout-link" href="/logout/">Log Out</a>') > -1) {
						callback(0, body);
					} else {
						callback(1, "");
						module.exports.output("User session token invalid!");
					}
				} else { 
					if (body.indexOf("<font face='arial' color='#ffffff' size=4><b>Fatal system error!</b></font>") > -1) {
						callback(2, "");
						module.exports.output("Page load failed! Is FA down?");	
					} else {
						callback(0, body);
					}
				}
			} else {
				callback(2, "");
				module.exports.output("Page load failed! Is FA down?");
			}
		});
	}
}