// Imports the backend functions for FA requests
var backend = require("./backend");
var request = require("request");

// Export the functions to the calling script
module.exports = {

	// Function: verbose
	// Description: Sets verbose output to display extensive feedback
	// Author: RingoTheFox

	verbose: function () {
		backend.verbose();
	},

	// Function: generateToken
	// Description: Generates a session token using the FA login page
	// Author: RingoTheFox
	// ------------------------------------------------------------------------------------------------------
	// Inputs: username (string) => FA Login Username
	// Inputs: password (string) => FA Login Password
	// ------------------------------------------------------------------------------------------------------
	// Outputs: error (integer) => Token generation error code
	//					0 => No Error
	//					1 => Invalid credentials
	//					2 => Page Load Failure
	// Outputs: sessionToken (string) => The generated session token if credentials are correct
	
	generateToken: function (username, password, callback) {
		if (username == "" || password == "") {
			callback(1, "");
			return;
		}

		request({
			uri: 'https://www.furaffinity.net/login/',
			method: "POST",
			headers: {
				'User-Agent' : backend.userAgent()
			},
			followRedirect: false,
			form: {
				action: "login", 
				retard_protection: "1", 
				name: username, 
				pass: password
			},
			timeout: 8000
		}, function(error, response, body) {
			if (!error) {
				try {
					var aCookie = response.headers['set-cookie'][1];
					aCookie = aCookie.split("; expires");
					aCookie = aCookie[0].split("a=")[1];
					
					var bCookie = response.headers['set-cookie'][0];
					bCookie = bCookie.split("; expires");
					bCookie = bCookie[0].split("b=")[1];
					
					var sessionToken = aCookie + "--" + bCookie;
					
					backend.output("Session token successfully generated for " + username);
					callback(0, sessionToken);
					return;
				} catch (e) {
					backend.output("Failed to generate session token for " + username);
					callback(1, "");
					return;
				}	
			} else {
				backend.output("Page load failed! Is FA down?");
				callback(2, "");		
				return;
			}
		});
	},
	
	// Function: getNotifications
	// Description: Gets the user's notification counts such as Submissions, Journals, Comments, etc
	// Author: RingoTheFox
	// ------------------------------------------------------------------------------------------------------
	// Inputs: sessionToken (string) => The user's session token
	// Inputs: callback (function) => The callback function to execute upon completion
	// ------------------------------------------------------------------------------------------------------
	// Outputs: error (integer) => Token generation error code
	//					0 => No Error
	//					1 => Invalid session token
	//					2 => Page Load Failure
	// Outputs: submissionCount (integer) => Submission count
	// Outputs: commentCount (integer) => Comment count
	// Outputs: journalCount (integer) => Journal count
	// Outputs: watchCount (integer) => Watch count
	// Outputs: favoriteCount (integer) => Favorite count
	// Outputs: nouteCount (integer) => Note/PM count

	getNotifications: function (sessionToken, callback) {
		var requestURL = 'http://www.furaffinity.net/controls/messages/';
		
		backend.postRequest(requestURL, sessionToken, '', function(error, body) {
			if (error == 0) {
				// Isolate the block of data we're looking for to allow for faster parsing
				var isolatedBlock = backend.parseText('<table cellpadding="0" cellspacing="1" border="0" width="95%" class="maintable">', '</table>', body);

				// Grab the details we're looking for
				var submissionCount = backend.parseText('<a href="/msg/submissions/">', ' Submissions</a><br/>', isolatedBlock);
				var commentCount = backend.parseText('<a href="/msg/others/?#comments">', ' Comments</a><br/>', isolatedBlock);
				var journalCount = backend.parseText('<a href="/msg/others/?#journals">', ' Journals</a><br/>', isolatedBlock);
				var watchCount = backend.parseText('<a href="/msg/others/?#watches">', ' Watches</a><br/>', isolatedBlock);
				var favoriteCount = backend.parseText('<a href="/msg/others/?#favorites">', ' Favorites</a><br/>', isolatedBlock);
				var noteCount = backend.parseText('<a href="/msg/pms/">', ' Private Messages</a><br/>', isolatedBlock);
				
				// Report back the findings to the calling function
				callback(0, submissionCount, commentCount, journalCount, watchCount, favoriteCount, noteCount);
			} else if (error == 1) {
				callback(1, 0, 0, 0, 0, 0, 0);
			} else if (error == 2) {
				callback(2, 0, 0, 0, 0, 0, 0);
			}
		});
	},
	
	// Function: getNoteList
	// Description: Gets a list of the users notes (PMs)
	// Author: RingoTheFox
	// ------------------------------------------------------------------------------------------------------
	// Inputs: sessionToken (string) => The user's session token
	// Inputs: notePage (integer) => The page number from which to list notes (100 notes max per page)
	// Inputs: callback (function) => The callback function to execute upon completion
	// ------------------------------------------------------------------------------------------------------
	// Outputs: error (integer) => Token generation error code
	//					0 => No Error
	//					1 => Invalid session token
	//					2 => Page Load Failure
	// Outputs: noteCount (integer) => Notes returned in list
	// Outputs: noteList (JSON object) => Array of note data
	//					- noteID (integer) => Note ID number
	//					- noteAuthor (string) => Username of note author
	//					- authorDisplayName (string) => Display name of the note author
	//					- noteTimestamp (string) => Note timestamp in Unix Epoch format
	//					- noteSubject (string) => Note subject
	//					- noteUnread (integer) => 1 if note is unread, 0 if note has been read

	getNoteList: function (sessionToken, notePage, callback) {
		if (notePage > 0) {
			var requestURL = 'http://www.furaffinity.net/msg/pms/' + notePage;
		} else {
			var requestURL = 'http://www.furaffinity.net/msg/pms/';
		}
		
		backend.postRequest(requestURL, sessionToken, '', function(error, body) {
			if (error == 0) {
				// Isolate the block of data we're looking for to allow for faster parsing
				var isolatedBlock = backend.parseText('<table cellpadding="2" cellspacing="1" border="0" width="100%" class="maintable container">', '</table>', body);
				
				// Generate an array of notes
				var rawNotesArray = isolatedBlock.split('<td class="alt1 subject"');
				var noteList = [];
				
				// Parse through each note and grab the details
				for (var i in rawNotesArray) {
					if (i > 0) {
						var noteID = backend.parseText('<input type="checkbox" name="items[]" value="', '" />', rawNotesArray[i]);
						var noteAuthor = backend.parseText('<a href="/user/', '/">', rawNotesArray[i]);
						var authorDisplayName = backend.parseText('<a href="/user/' + noteAuthor + '/">~', '</a>', rawNotesArray[i]);
						var noteTimestamp = backend.parseText('<span title="', '" class="', rawNotesArray[i]);
						var noteSubject = backend.parseText('href="/viewmessage/' + noteID + '/">', '</a>', rawNotesArray[i]);
						
						// Format the timestamp to be converted into the Unix Epoch
						noteTimestamp = noteTimestamp.replace(/,/g , "");
						noteTimestamp = noteTimestamp.replace("st", "");
						noteTimestamp = noteTimestamp.replace("nd", "");
						noteTimestamp = noteTimestamp.replace("rd", "");
						noteTimestamp = noteTimestamp.replace("th", "");
						
						noteTimestamp = new Date(noteTimestamp).getTime() / 1000;
						
						// Output 'No Subject' if no subject is specified (used to eliminate HTML in subject line)
						if (noteSubject == '<i>No Subject</i>') {
							noteSubject = "No Subject";
						}
						
						// Check if the note has been read
						if (rawNotesArray[i].indexOf('class="note-unread unread"') > -1) {
							noteUnread = 1;
						} else {
							noteUnread = 0;
						}
						
						// Add the note to the JSON output array
						noteList.push({
							noteID: noteID,
							noteAuthor: noteAuthor,
							authorDisplayName: authorDisplayName,
							noteTimestamp: noteTimestamp,
							noteSubject: noteSubject,
							noteUnread: noteUnread
						});
					}
				}
				
				var noteCount = noteList.length;
				
				// Report back the findings to the calling function
				callback(0, noteCount, noteList);
			} else if (error == 1) {
				callback(1, 0, []);
			} else if (error == 2) {
				callback(2, 0, []);
			}
		});
	}
}